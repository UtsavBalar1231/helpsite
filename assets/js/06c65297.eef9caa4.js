"use strict";(self.webpackChunksemester_6_help=self.webpackChunksemester_6_help||[]).push([[752],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3121:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={sidebar_position:1,slug:"/rust-unit1"},u=void 0,s={unversionedId:"Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit1",id:"Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit1",title:"rust-unit1",description:"Rust",source:"@site/docs/Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit1.md",sourceDirName:"Syllabus-Theory/Modern-Programming-Technologies/rust",slug:"/rust-unit1",permalink:"/docs/rust-unit1",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/rust-unit1"},sidebar:"tutorialSidebar",previous:{title:"mpt-syllabus",permalink:"/docs/mpt-syllabus"},next:{title:"rust-unit2",permalink:"/docs/rust-unit2"}},p=[{value:"Rust: Common Programming Concept:",id:"rust-common-programming-concept",children:[],level:2},{value:"Rust: Understanding Ownership:",id:"rust-understanding-ownership",children:[],level:2}],c={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"rust-common-programming-concept"},"Rust: Common Programming Concept:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Variables and mutability:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Differences between variables and constants"),(0,i.kt)("li",{parentName:"ul"},"Shadowing"))),(0,i.kt)("li",{parentName:"ul"},"Data Types:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Scalar types"),(0,i.kt)("li",{parentName:"ul"},"Compound types"))),(0,i.kt)("li",{parentName:"ul"},"Functions:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Function parameters:"),(0,i.kt)("li",{parentName:"ul"},"statements"),(0,i.kt)("li",{parentName:"ul"},"Expressions in function bodies"),(0,i.kt)("li",{parentName:"ul"},"Functions with return values"))),(0,i.kt)("li",{parentName:"ul"},"Comments"),(0,i.kt)("li",{parentName:"ul"},"Control flow:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"if expressions"),(0,i.kt)("li",{parentName:"ul"},"Repetition with loops")))),(0,i.kt)("h2",{id:"rust-understanding-ownership"},"Rust: Understanding Ownership:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"What is ownership:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Ownership rules"),(0,i.kt)("li",{parentName:"ul"},"Variable scope"),(0,i.kt)("li",{parentName:"ul"},"The string type"),(0,i.kt)("li",{parentName:"ul"},"Memory and allocation"),(0,i.kt)("li",{parentName:"ul"},"Ownership and functions"),(0,i.kt)("li",{parentName:"ul"},"Return values and scope"))),(0,i.kt)("li",{parentName:"ul"},"References and borrowing:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Mutable references"),(0,i.kt)("li",{parentName:"ul"},"dangling references"),(0,i.kt)("li",{parentName:"ul"},"The rules of references"))),(0,i.kt)("li",{parentName:"ul"},"The slice type:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"String slices"),(0,i.kt)("li",{parentName:"ul"},"Other slices")))))}m.isMDXComponent=!0}}]);