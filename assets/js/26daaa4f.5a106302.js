"use strict";(self.webpackChunksemester_6_help=self.webpackChunksemester_6_help||[]).push([[2525],{3905:function(t,e,r){r.d(e,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){i(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,n,i=function(t,e){if(null==t)return{};var r,n,i={},a=Object.keys(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||(i[r]=t[r]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)r=a[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}var s=n.createContext({}),l=function(t){var e=n.useContext(s),r=e;return t&&(r="function"==typeof t?t(e):u(u({},e),t)),r},c=function(t){var e=l(t.components);return n.createElement(s.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var r=t.components,i=t.mdxType,a=t.originalType,s=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),m=l(r),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,u(u({ref:e},c),{},{components:r})):n.createElement(f,u({ref:e},c))}));function d(t,e){var r=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=r.length,u=new Array(a);u[0]=m;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:i,u[1]=o;for(var l=2;l<a;l++)u[l]=r[l];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1493:function(t,e,r){r.r(e),r.d(e,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),u=["components"],o={sidebar_position:1,slug:"/rust-unit2"},s=void 0,l={unversionedId:"Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit2",id:"Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit2",title:"rust-unit2",description:"Rust",source:"@site/docs/Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit2.md",sourceDirName:"Syllabus-Theory/Modern-Programming-Technologies/rust",slug:"/rust-unit2",permalink:"/docs/rust-unit2",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Syllabus-Theory/Modern-Programming-Technologies/rust/rust-unit2.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/rust-unit2"},sidebar:"tutorialSidebar",previous:{title:"rust-unit1",permalink:"/docs/rust-unit1"},next:{title:"rust-unit3",permalink:"/docs/rust-unit3"}},c=[{value:"Rust: Using Structs to Structure related Data:",id:"rust-using-structs-to-structure-related-data",children:[],level:2}],p={toc:c};function m(t){var e=t.components,r=(0,i.Z)(t,u);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"rust-using-structs-to-structure-related-data"},"Rust: Using Structs to Structure related Data:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Defining and instantiating Structs",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Using the field init shorthand when variables and fields have the same name"),(0,a.kt)("li",{parentName:"ul"},"Creating instances from other instances with struct update syntax"),(0,a.kt)("li",{parentName:"ul"},"Using tuple structs without named fields to create different types"),(0,a.kt)("li",{parentName:"ul"},"Unit-like structs without any fields"))),(0,a.kt)("li",{parentName:"ul"},"An example program using structs:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Refactoring with tuples"),(0,a.kt)("li",{parentName:"ul"},"Refactoring with structs"),(0,a.kt)("li",{parentName:"ul"},"Adding more meaning,"),(0,a.kt)("li",{parentName:"ul"},"Adding useful functionality with derived traits"))),(0,a.kt)("li",{parentName:"ul"},"Method syntax",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Defining methods"),(0,a.kt)("li",{parentName:"ul"},"methods with more parameters"),(0,a.kt)("li",{parentName:"ul"},"Associated functions"),(0,a.kt)("li",{parentName:"ul"},"Multiple impl blocks")))))}m.isMDXComponent=!0}}]);